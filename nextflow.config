// ================== Nextflow Config ==================
// Params
params {
  reads        = null          // e.g., '/path/to/fastq/*.fastq.gz'
  assemblies   = null           
  kraken2_db   = null
  gtdbtk_db    = null
  outdir       = 'results'
  abricate_db_dir = '/Users/arundecano/miniforge3/envs/abricate/db' //'$WORKDIR/conda/envs/abricate/db'
  abricate_db_amr  = 'resfinder'
  abricate_db_plm  = 'plasmidfinder'
  bakta_db    = '/path/to/bakta_db'
  bandage_resolution    = 300
  bandage_annotations   = false  // set true to add labels on images
}

// General
//workDir = "work"
workDir = "$HOME/nxf_work" // Changed to user home directory for better permissions
//workDir = "/private/var/tmp/nxf_work" //for my Mac Air - commented out due to permission issues
cleanup = false

process {
  beforeScript = 'umask 022'
  shell = ['/bin/bash','-ueo','pipefail','-c']
  executor = 'local'
  environment = [
    'CONDA_ALWAYS_YES': 'true',
    'MAMBA_YES':        'true',
    'MAMBA_NO_BANNER':  '1',
    'PYTHONNOUSERSITE': '1'
  ]
}

//process {
  //shell = ['/bin/bash', '-euo', 'pipefail', '-c']
  //executor = 'local'
//}

process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

//executor {
  //queueSize = 1  // raise later after stable
//}

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_timeline.html"
  overwrite = true
}

report {
  enabled = true
  file = "${params.outdir}/pipeline_report.html"
  overwrite = true
}

trace {
  enabled = true
  file = "${params.outdir}/pipeline_trace.txt"
  overwrite = true
}

dag {
  enabled = true
  file = "${params.outdir}/pipeline_dag.png"
  overwrite = true
}

// Resource presets by label
process {
  errorStrategy = { task.exitStatus in [130,137,140] ? 'retry' : 'terminate' }
  maxRetries    = 1
  maxForks      = 4

  withLabel: 'light' {
    cpus = 2
    memory = 4.GB
    time = 2.h
  }

  withLabel: 'medium' {
    cpus = 8
    memory = 16.GB
    time = 8.h
  }

  withLabel: 'heavy' {
    cpus = 16
    memory = 48.GB
    time = 24.h
  }
}

// -------- Software environments (conda) --------
// Use per-process conda packages. Adjust versions if needed.
conda {
  enabled = true
  //useMamba = true
  cacheDir = "$HOME/.conda_envs_nf_cache"
  //cacheDir = "$WORKDIR/conda/envs"
  channels = ['conda-forge', 'bioconda', 'defaults']
  createOptions = '-y'
}

// -------- Profiles --------
profiles {
  conda {
    conda.enabled = true
    //conda.useMamba = true   // much faster on HPC

    process {
      withLabel: 'nanoplot' { conda = 'bioconda::nanoplot=1.42.0' }
      withLabel: 'filtlong' { conda = 'bioconda::filtlong=0.2.1' }
      withLabel: 'flye'     { conda = 'bioconda::flye=2.9.4' }
      withLabel: 'panaroo'  { conda = 'bioconda::panaroo=1.5.4' }
      //withLabel: 'abricate' { conda = 'bioconda::abricate=1.0.1' }
      withLabel: 'bakta'    { conda = 'bioconda::bakta=1.9.4' }
      withLabel: 'kraken2'  { conda = 'bioconda::kraken2=2.1.3' }
      withLabel: 'gtdbtk'   { conda = 'bioconda::gtdbtk=2.4.0' }
      withLabel: 'iqtree2'  { conda = 'bioconda::iqtree=2.3.5' }
      withLabel: 'raxmlng'  { conda = 'bioconda::raxml-ng=1.2.2' }
      //withLabel: 'multiqc'  { conda = 'bioconda::multiqc=1.25' }
    }
  }

  // Local Mac / laptop with conda
  mac {
    process.executor = 'local'
    docker.enabled = false
    singularity.enabled = false
    conda.enabled = true
  }

  // SLURM HPC profile (adjust to your cluster settings)
  slurm {
    process.executor = 'slurm'
    queueSize = 50
    conda.enabled = true
    singularity.enabled = false
    docker.enabled = false

    // Example SLURM resource mapping; tweak for your site
    process {
      withLabel: 'light'  { cpus = 2;  memory = 4.GB;  time = 2.h }
      withLabel: 'medium' { cpus = 8;  memory = 16.GB; time = 12.h }
      withLabel: 'heavy'  { cpus = 16; memory = 64.GB; time = 48.h }
    }
  }

  // Optional: Docker/Singularity profiles if you later add containers
  docker {
    docker.enabled = true
    singularity.enabled = false
    conda.enabled = false
    process.executor = 'local'
  }

  singularity {
    singularity.enabled = true
    docker.enabled = false
    conda.enabled = false
    process.executor = 'local'
  }
}