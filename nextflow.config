/*
    Configuration file for nanopore_amr pipeline
*/

manifest {
  name        = 'nanopore_amr_pipeline'
  author      = 'Arun Decano'
  description = 'De novo assembly, taxon ID, and AMR annotation for ONT reads'
  version     = '0.1.0'
}

params {
  // I/O
  reads       = "data/**/*.{fastq,fq,fastq.gz,fq.gz}"   // used by Channel.fromPath in main.nf
  ref         = ""                                      // optional reference FASTA (for QUAST-from-reads or mapping)
  contigs     = ""                                      // optional contigs FASTA (if skipping assembly step)
  outdir      = "results"
  prefix      = ""                                      // optional sample/pipeline prefix

  // Databases
  kraken2_db  = ""                              // required for KRAKEN2
  mlstdb      = ""                              // if used by MLST step 
  mlst_loci   = ""                              // optional locus list if needed

  // Execution
  max_cpus    = 16
  max_memory  = '64 GB'
  max_time    = '48h'

  // Conda / Mamba
  enable_conda = false
}

process {
  executor = 'local'
  scratch  = true
  errorStrategy = 'retry'
  maxRetries    = 2
  withName: '.*' {
    publishDir = [
      path: { "${params.outdir}/${task.process}".toString() },
      mode: 'copy',
      overwrite: true
    ]
  }

  // sane global caps; per-label blocks below can override
  cpus   = 4
  memory = '8 GB'
  time   = '6h'
}

timeline {
  enabled = true
  file    = "${params.outdir}/pipeline.timeline.html"
}
trace {
  enabled = true
  file    = "${params.outdir}/pipeline.trace.tsv"
}
report {
  enabled = true
  file    = "${params.outdir}/pipeline.report.html"
}
dag {
  enabled = true
  file    = "${params.outdir}/pipeline.flowchart.svg"
}

env {
  // Keep locale clean for bio tools
  LC_ALL = 'C'
}

/* =========================
 * Conda environment settings
 * ========================= */

process {

  // Basecalling (Dorado / Guppy)
  withLabel: 'dorado basecall' {
    cpus = 8; memory = '8 GB'; time = '8h'
    // conda assigned via profile below
  }
  withLabel: 'guppy basecall' {
    cpus = 8; memory = '8 GB'; time = '8h'
  }

  // Read QC
  withLabel: 'rawfastqc_single' {
    cpus = 2; memory = '2 GB'; time = '2h'
  }
  withLabel: 'cleanfastqc_single' {
    cpus = 2; memory = '2 GB'; time = '2h'
  }
  withLabel: 'multiqc_reads' {
    cpus = 2; memory = '2 GB'; time = '1h'
  }

  // Filtering / trimming
  withLabel: 'filtlong' {
    cpus = 4; memory = '8 GB'; time = '6h'
  }
  withLabel: 'fastp_single' {
    cpus = 4; memory = '4 GB'; time = '4h'
  }

  // Assembly + metrics
  withLabel: 'assembly' {
    cpus = 12; memory = '32 GB'; time = '24h'
  }
  withLabel: 'quast_from_reads' {
    cpus = 4; memory = '8 GB'; time = '8h'
  }
  withLabel: 'multiqc_contigs' {
    cpus = 2; memory = '2 GB'; time = '1h'
  }
  withLabel: 'assembly_stats' {
    cpus = 2; memory = '2 GB'; time = '2h'
  }
  withLabel: 'assembly_quality' {
    cpus = 2; memory = '4 GB'; time = '3h'
  }

  // Taxonomy
  withLabel: 'kraken2' {
    cpus = 8; memory = '16 GB'; time = '12h'
  }

  // Coverage / mapping summaries
  withLabel: 'count_bases' {
    cpus = 2; memory = '2 GB'; time = '1h'
  }
  withLabel: 'genome_depth' {
    cpus = 4; memory = '8 GB'; time = '6h'
  }

  // AMR calling / formatting (Abricate-compatible)
  withLabel: 'amr_abrformat' {
    cpus = 4; memory = '8 GB'; time = '6h'
  }
  withLabel: 'amrfinderplus' {
    cpus = 6; memory = '12 GB'; time = '12h'
  }
  withLabel: 'mobtyper' {
    cpus = 4; memory = '8 GB'; time = '6h'
  }
  withLabel: 'mlst' {
    cpus = 2; memory = '2 GB'; time = '2h'
  }
  withLabel: 'summary_blastn' {
    cpus = 2; memory = '4 GB'; time = '4h'
  }

  // Annotation / pangenome
  withLabel: 'prokka' {
    cpus = 8; memory = '16 GB'; time = '12h'
  }
  withLabel: 'roary' {
    cpus = 8; memory = '16 GB'; time = '24h'
  }

  // Phylogeny
  withLabel: 'iqtree' {
    cpus = 8; memory = '16 GB'; time = '24h'
  }
  withLabel: 'raxml' {
    cpus = 8; memory = '16 GB'; time = '24h'
  }

  // GTDB-Tk (heavy)
  withLabel: 'gtdbtk' {
    cpus = 12; memory = '48 GB'; time = '36h'
  }
}

/* =========================
 * Conda / Mamba integration
 * ========================= */

conda {
  enabled  = params.enable_conda
  useMamba = true
}

profiles {

  // Enable with: -profile conda
  conda {
    params.enable_conda = true

    process {
      withLabel: 'dorado basecall' { conda = "conda_setup/envs/dorado_basecall.yml" }
      withLabel: 'guppy basecall'  { conda = "conda_setup/envs/guppy_basecall.yml"  }

      withLabel: 'rawfastqc_single'   { conda = "conda_setup/envs/rawfastqc_single.yml" }
      withLabel: 'cleanfastqc_single' { conda = "conda_setup/envs/cleanfastqc_single.yml" }
      withLabel: 'multiqc_reads'      { conda = "conda_setup/envs/multiqc_reads.yml" }
      withLabel: 'multiqc_contigs'    { conda = "conda_setup/envs/multiqc_contigs.yml" }

      withLabel: 'filtlong'       { conda = "conda_setup/envs/filtlong.yml" }
      withLabel: 'fastp_single'   { conda = "conda_setup/envs/fastp_single.yml" }

      withLabel: 'assembly'           { conda = "conda_setup/envs/assembly.yml" }
      withLabel: 'quast_from_reads'   { conda = "conda_setup/envs/quast_from_reads.yml" }
      withLabel: 'assembly_stats'     { conda = "conda_setup/envs/assembly_stats.yml" }
      withLabel: 'assembly_quality'   { conda = "conda_setup/envs/assembly_quality.yml" }

      withLabel: 'kraken2'        { conda = "conda_setup/envs/kraken2.yml" }
      withLabel: 'count_bases'    { conda = "conda_setup/envs/count_bases.yml" }
      withLabel: 'genome_depth'   { conda = "conda_setup/envs/genome_depth.yml" }

      withLabel: 'amr_abrformat'  { conda = "conda_setup/envs/amr_abrformat.yml" }
      withLabel: 'mobtyper'       { conda = "conda_setup/envs/mobtyper.yml" }
      withLabel: 'amrfinderplus'  { conda = "conda_setup/envs/amrfinderplus.yml" }
      withLabel: 'mlst'           { conda = "conda_setup/envs/mlst.yml" }
      withLabel: 'summary_blastn' { conda = "conda_setup/envs/summary_blastn.yml" }

      withLabel: 'prokka'         { conda = "conda_setup/envs/prokka.yml" }
      withLabel: 'roary'          { conda = "conda_setup/envs/roary.yml" }

      withLabel: 'iqtree'         { conda = "conda_setup/envs/iqtree.yml" }
      withLabel: 'raxml'          { conda = "conda_setup/envs/raxml.yml" }

      withLabel: 'gtdbtk'         { conda = "conda_setup/envs/gtdbtk.yml" }
      withLabel: 'phylogeny'      { conda = "conda_setup/envs/phylogeny.yml" }
    }
  }
}